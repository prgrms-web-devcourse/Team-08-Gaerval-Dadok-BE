buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.8'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
    id 'jacoco'
    id 'com.epages.restdocs-api-spec' version '0.16.4'
}

group = 'com.dadok'
version = '0.8.1'
sourceCompatibility = '17'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

jacoco {
    toolVersion = '0.8.8'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.0'

    // Apache Commons Lang
    implementation 'org.apache.commons:commons-lang3:3.0'
    implementation 'commons-validator:commons-validator:1.7'

    // p6spy
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.8.1'
    // mapstruct
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    // jwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
    //oauth
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // slack
    implementation 'com.slack.api:slack-api-client:1.27.3'

    compileOnly 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testImplementation 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    annotationProcessor 'org.projectlombok:lombok'
    // lombok- mapstruct binding
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '4.9.0'
    // javax.annotation.meta.When runtime에 적용
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation 'com.google.guava:guava:31.1-jre'

    testImplementation 'com.epages:restdocs-api-spec:0.16.4'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.4'
}

def excludesValues = [
        "com/dadok/gaerval/global/*",
        "**/*Properties.class",
        "**/*Exception.class",
        "**/request/*",
        "**/exception/*",
        "**/response/*",
        "com.dadok.gaerval.DadokApplication.class"
]

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    def Qdomains = []
    for (qPattern in "**/QA".."**/QZ") {
        Qdomains.add(qPattern + "*")
    }

    afterEvaluate {

        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    excludes: excludesValues + Qdomains) // 제외할 Qdomains 패턴 추가
        }))

    }

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true

        html.destination file("${buildDir}/jacoco/test_report")
        xml.destination file("${buildDir}/jacoco/test_report/test_report.xml")
    }
}

jacocoTestCoverageVerification {

    def Qdomains = []
    for (qPattern in "*.QA".."*.QZ") {
        Qdomains.add(qPattern + "*")
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            // include = []
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            excludes = excludesValues + Qdomains
        }

    }
}

// ---- querydsl 설정
// querydsl 사용할 경로 지정. 현재 지정한 부분은 .gitignore 에 포함되므로 git 에 올라가지 않는다.
def querydslDir = "$buildDir/generated/'querydsl'"

querydsl { // JPA 사용여부 및 사용 경로 설정
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets { // build시 사용할 sourceSet 추가 설정
    main.java.srcDir querydslDir
}

compileQuerydsl { // querydsl 컴파일 시 사용할 옵션 설정
    options.annotationProcessorPath = configurations.querydsl
}

// querydsl이 compileClassPath를 상속하도록 설정
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl.doFirst {
    if (file(querydslDir).exists()) delete(file(querydslDir))
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(querydslDir)
    delete file("$buildDir/resources/main/static/docs")
    println('-------------------------------------------------------')
    println('clean do remove docs')
    delete file('src/main/resources/static/docs')
    println('-------------------------------------------------------')
    println()
}

// ---- querydsl
test {
    useJUnitPlatform()
    outputs.dir snippetsDir
    finalizedBy 'jacocoTestReport'

    def Qdomains = []
    for (qPattern in "*.QA".."*.QZ") {
        Qdomains.add(qPattern + "*")
    }

    jacoco {
        excludes += excludesValues + Qdomains
    }
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

asciidoctor.doFirst {
    println('-------------------------------------------------------')
    println('do first remove docs')
    delete file('src/main/resources/static/docs')
    println('-------------------------------------------------------')
    println()
}

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    sources {
        include("**/index.adoc", "**/common/*.adoc")
    }
    baseDirFollowsSourceFile()
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    println('-------------------------------------------------------')
    println('copy document')
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
    println('-------------------------------------------------------')
    println()
}

//task copyHtml(type: Copy) {
//    dependsOn bootJar
//    from file("${buildDir}/docs/asciidoc")
//    into file("${buildDir}/reouces/main/static/docs")
//}

build {
    dependsOn copyDocument
}

openapi3 {
    servers = [
            { url = 'http://localhost:8080' },
    ]
    title = 'Dadok API Document'
    description = 'Dadok openApi3'
    version = "${project.version}"
    format = 'yaml'
}

task copyOpenApi3(type: Copy) {
    println("run copyOpenApi3")
    delete("src/main/resources/static/swagger-ui/openapi3.yaml") // 기존 OAS 파일 삭제
    from("$buildDir/api-spec/openapi3.yaml") // 복제할 OAS 파일 지정
    into("src/main/resources/static/openapi3/") // 타겟 디렉터리로 파일 복제
    dependsOn("openapi3")
}

// 1. logback-spring.xml 파일이 있는 경로를 설정
def logbackConfigDir = file('.')

// 2. JAR 파일을 생성하기 전에 logback-spring.xml 파일을 해당 위치에 복사.
task copyLogbackConfig(type: Copy) {
    from logbackConfigDir
    into 'build/resources/main'
    include 'logback-spring.xml'
}

bootJar {
    dependsOn asciidoctor
    dependsOn copyDocument
    dependsOn copyLogbackConfig
    dependsOn copyOpenApi3

    println("run bootJar")
    println("${asciidoctor.outputDir}")

    copy {
        from("${asciidoctor.outputDir}/html5") {
            into "$buildDir/resources/main/static/docs"
        }
    }

    from file("${buildDir}/docs/asciidoc")
    into file("${buildDir}/resources/main/static/docs")


    copy {
        from("build/resources/main/static/docs") {
            into "$buildDir/resources/main/static/docs"
        }
    }

    archiveName = version + ".dadok.jar"
}