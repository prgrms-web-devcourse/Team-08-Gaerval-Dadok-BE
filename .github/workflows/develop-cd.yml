name: develop cd

on:
  push:
    branches: [ "develop" ]

permissions:
  checks: write
  pull-requests: write

jobs:
  MOVE_FILE:
    runs-on: ubuntu-latest
    steps:

      - name: Add private key
        run: |
          echo "${{ secrets.PRIVATE_KEY }}"

      - name: Remote Check and install Docker
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.USERNAME }}
          host: ${{ secrets.HOST_DEV }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose

      - name: Copy .env to remote server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USERNAME }}
          port: 22
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            mkdir -p /home/ec2-user/app/
            scp .env ${{ secrets.USERNAME }}@${{ secrets.HOST_DEV }}:/home/ec2-user/app/.env

      - name: Copy nginx configuration to remote server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USERNAME }}
          port: 22
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            mkdir -p /home/ec2-user/app/nginx/
            scp ./nginx/default.conf ${{ secrets.USERNAME }}@${{ secrets.HOST_DEV }}:/home/ec2-user/app/nginx/default.conf   

  CD:
    runs-on: ubuntu-latest
    steps:
      - name: checkout branch
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: set up environment Variable
        run: |
          echo "${{secrets.DEVELOP_ENV_FILE }}" > ./.env
          echo "${{secrets.APPLICATION_TEST}}" >> ./src/test/resources/application-test.yml

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name : ls -al
        run: ls -al

      - name: Setup Gradle permission
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: build with Gradle
        run: ./gradlew clean build --build-cache --daemon

      - name: docker hub push
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker build --platform linux/amd64 -t ${{ secrets.DOCKER_DEV_REPO }} .
          docker push ${{ secrets.DOCKER_DEV_REPO }}


      - name: Deploy to develop
        uses: appleboy/ssh-action@master
        id: deploy-dev
        if: contains(github.ref, 'develop')
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USERNAME }}
          port: 22
          key: ${{ secrets.PRIVATE_KEY }}
          source: "docker-compose-dev.yml"
          script: |
            cd app
            sudo docker pull ${{ secrets.DOCKER_DEV_REPO }}
            docker-compose up -d
            docker image prune -f
            scp ./docker-compose-dev.yml ${{ secrets.USERNAME }}@${{ secrets.HOST_DEV }}:/home/ec2-user/app/docker-compose-dev.yml
            ssh ${secrets.USERNAME}@${secrets.HOST_DEV} -i "${secrets.PRIVATE_KEY}" ".deploy-dev.sh"